:root {
    --image-height: 9.5rem;
    --animation-duration: 0.4s;
}

.homepage {
    background-color: #f5f5f5;
    padding: 5rem 3rem 0 3rem;
    height: 100%;
}

a {
    color: white;
    text-decoration: inherit;
}

.projects {
    display: flex;
    flex-wrap: wrap;
    justify-content: left;
    align-items: center;
}

.project {
    margin: 1rem 0.5rem 1rem 0.5rem;
    width: 17rem;
    height: 12.5rem;
    background-color: #232123;
    border-radius: 1rem;
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    position: relative;
    overflow: hidden; /* Add this to hide the black box when it's not hovered */
    color: white;
}

.project img {
    width: 100%;
    object-fit: cover;
    border-radius: 1rem 1rem 0 0;
    height: var(--image-height);
}

.project h3 {
    margin: auto;
    transition: transform 0.5s;
    z-index: 2; /* This ensures the text is above the black box */
}

.project:hover h3 {
    transform: translateY(calc(-1 * var(--image-height)));
}

.project:hover {
    box-shadow: 0 0 1rem 0.25rem rgba(0, 0, 0, 0.15);
}

.project::before {
    content: "";
    position: absolute;
    bottom: 100%-9.5rem;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: black;
    transform: translateY(var(--image-height));
    transition: transform 0.5s;
    z-index: 1; /* This ensures the black box is above the other content but below the text */
}

.project:hover::before {
    transform: translateY(0);
}

.project p {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 1rem;
    box-sizing: border-box;
    
    transform: translateY(100%);
    transition: transform 0.5s, opacity 0.5s;
    z-index: 2;
    
}

.project:hover p {
    transform: translateY(0);
}

.modal {
    width: 50%;
    height: 90%;
    overflow: auto;
}

.modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 1rem;
    cursor: pointer;
}
/* Animations */
dialog[open] {
  opacity: 1;
  transform: scaleY(1);
}

/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scaleY(0);
  transition:
    opacity var(--animation-duration) ease-out,
    transform var(--animation-duration) ease-out,
    overlay var(--animation-duration) ease-out allow-discrete,
    display var(--animation-duration) ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scaleY(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0);
  transition:
    display 0.7s allow-discrete,
    overlay 0.7s allow-discrete,
    background-color 0.7s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 0.5);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0);
  }
}